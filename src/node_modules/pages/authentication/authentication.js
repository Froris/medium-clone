import React, { useState, useEffect, useContext } from 'react';
import { Link, Redirect } from 'react-router-dom';
import useFetch from 'hooks/useFetch';
import useLocalStorage from 'hooks/useLocalStorage';
import BackendErrorMessages from 'components/backendErrorMessages';
import { CurrentUserContext } from 'contexts/currentUser';

const Authentication = (props) => {
	const isLogin = props.match.path === '/login';
	const pageTitle = isLogin ? 'Sign In' : 'Sign Up';
	const descriptionLink = isLogin ? '/register' : '/login';
	const descriptionText = isLogin ? 'Need an account?' : 'Have an account?';

	// Контекст с данными пользователя.
	// содержание значений CurrentUserContext будет равно тому, 
	// которое передано в Provider (деструктурируется объект и функция).
	const [, dispatch] = useContext(CurrentUserContext);

	const [isSuccessfullSubmit, setIsSuccessfullSubmit] = useState(false);
	
	// Данные с формы
	const [email, setEmail] = useState('');
	const [password, setPassword] = useState('');
	const [username, setUsername] = useState('');
	
	// Кастомный хук local storage
	const [, setToken] = useLocalStorage('token');
	// Кастомный хук для авторизации - 'useFetch'
	const apiUrl = isLogin ? '/users/login' : '/users';
	const [ {isLoading, response, errorsObj}, doFetch ] = useFetch(apiUrl);

	// Отправка данных с формы
	const handleSubmit = (e) => {
		e.preventDefault();
		const user = isLogin ? {email, password} : {username, email, password}
		doFetch({
			method: 'post',
			data: {
				user
			}
		})
	}

	// Сохраняем токен юзера
	useEffect(() => {
		if(!response){
			return
		}
		setToken(response.user.token);
		setIsSuccessfullSubmit(true);
		dispatch({type: 'SET_AUTHORIZED', payload: response.user})
	}, [response, setToken, dispatch])

	// Редирект после авторизации/регистрации
	if(isSuccessfullSubmit){
		return <Redirect to='/' />
	}

	return (
		<div className='auth-page'>
			<div className='container page'>
				<div className='row'>
					<div className='col-md-6 offset-md-3 col-xs-12'>
						<h1 className='text-xs-center'>{pageTitle}</h1>
						<p className='text-xs-center'>
							<Link to={descriptionLink}>{descriptionText}</Link>
						</p>
						<form onSubmit={ handleSubmit } >
						{errorsObj && <BackendErrorMessages backendErrors={errorsObj.errors} />}
						{!isLogin && 
							<fieldset className='form-group'>
								<input 
									type='text' 
									className='form-control form-control-lg'
									placeholder='Username'
									onChange={e => setUsername(e.target.value)}
									value={username}
								/>
							</fieldset>
						}
						<fieldset className='form-group'>
							<input 
								type='email' 
								className='form-control form-control-lg'
								placeholder='Email'
								onChange={e => setEmail(e.target.value)}
								value={email}
							/>
						</fieldset>
						<fieldset className='form-group'>
							<input 
								type='password' 
								className='form-control form-control-lg'
								placeholder='password'
								onChange={e => setPassword(e.target.value)}
								value={password}
							/>
						</fieldset>
						<button 
							className='btn btn-lg btn-primary pull-xs-rigth' 
							type='submit'
							disabled={isLoading}
						>{pageTitle}	
						</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	)
}

export default Authentication;